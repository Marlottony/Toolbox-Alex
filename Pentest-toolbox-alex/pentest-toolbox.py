from modules.cvelookup import CVELookUp, extract_and_detail_cves_from_url
from modules.searchsploit import searchsploit
from modules.dnslookup import DNSLookUp
from modules.certificate import getCertificate
from modules.portscan import Nmap
from modules.usernamecheck import checkusername
from modules.phonereverse import lookuphone
from modules.dorks import dorks
from modules.whoisrecon import whois_query
from modules.revshellgenerator import reverse_shells
from modules.fakeidentity import generate_fake_identity
from modules.webscan import check_server, check_robots_txt, url_discover, find_github
from modules.fpdf import renderHTML
from menu import displayHeader, displayMenu, ReconMenu, ScanningMenu, ExploitMenu, OsintMenu
from colorama import Fore, Style, init as colorama_init
from datetime import datetime
import os

def input_with_retry(prompt, input_type=str):
    """Prompt for user input and retry until the input is of the expected type."""
    while True:
        try:
            return input_type(input(prompt))
        except ValueError:
            print(f"{Fore.RED}Invalid input. Please try again.{Style.RESET_ALL}")

def recon_menu():
    """Handle the Reconnaissance menu."""
    while True:
        ReconMenu()
        subOption = input(">>> Choose an option\n>>> ").strip().lower()
        if subOption == 'z':
            break
        elif subOption == 'a':
            domain = input(">>> Type a domain name\n>>> ")
            print(whois_query(domain))
        elif subOption == 'b':
            CVE_ID = input(">>> Enter a CVE id (ex: CVE-2021-40438)\n>>> ")
            print(CVELookUp(CVE_ID))
        elif subOption == 'c':
            DNS_DOMAIN = input(">>> Enter a domain name\n>>> ")
            print(DNSLookUp(DNS_DOMAIN))
        elif subOption == 'd':
            CERTIF = input(">>> Enter a domain name\n>>> ")
            print(getCertificate(CERTIF))
        elif subOption == 'e':
            url = input(">>> Enter the URL to extract CVEs (ex: https://www.debian.org/security/2021/dsa-4982): ")
            cves_details = extract_and_detail_cves_from_url(url)
            if isinstance(cves_details, str):
                print(cves_details)  # Print an error message or "No CVEs found"
            else:
                print("\nDetails of CVEs found at the specified URL:\n")
                for cve_id, details in cves_details.items():
                    print(f"{cve_id} : {details}")

def scanning_menu():
    """Handle the Scanning menu."""
    while True:
        ScanningMenu()
        subOption = input(">>> Choose an option\n>>> ").strip().lower()
        if subOption == 'z':
            break
        elif subOption == 'a':
            TARGET = input(">>> Type target domain or IP\n>>> ")
            scan, version = Nmap(TARGET)
            print(scan)
        elif subOption == 'b':
            URL = input(">>> Type target URL (http://example.com/)\n>>> ")
            check_server(URL, False)
            check_robots_txt(URL)
            find_github(URL)
        elif subOption == 'c':
            URL = input(">>> Type target URL (http://example.com/)\n>>> ")
            print(f">>> {Fore.GREEN}[+] Starting a dirbuster scan {Style.RESET_ALL}")
            url_discover(URL)

def exploit_menu():
    """Handle the Exploit menu."""
    while True:
        ExploitMenu()
        subOption = input(">>> Choose an option\n>>> ").strip().lower()
        if subOption == 'z':
            break
        elif subOption == 'a':
            service = input(">>> Search for exploits on a service (ex: wordpress 4.0)\n>>> ")
            exploit = searchsploit(service)
            print(exploit)

def osint_menu():
    """Handle the OSINT menu."""
    while True:
        OsintMenu()
        subOption = input(">>> Choose an option\n>>> ").strip().lower()
        if subOption == 'z':
            break
        elif subOption == 'a':
            user = input(">>> Enter a username\n>>> ")
            usernamecheck = checkusername(user)
            print(usernamecheck)
        elif subOption == 'b':
            numberphone = input(">>> Enter a phone number in international format (ex: 33969370364)\n>>> ")
            phone = lookuphone(numberphone)
            print(phone)
        elif subOption == 'c':
            local = 'fr_FR'
            fake_identity = generate_fake_identity(local)
            print(fake_identity)
        elif subOption == 'd':
            querys = input('>>> Enter a dorks requests (ex: "mommy" filetype:pdf)\n>>> ')
            dorkquery = dorks(querys)
            print(dorkquery)

def generate_report():
    """Generate a vulnerability report."""
    domain = input(">>> Enter target domain name\n>>> ")
    URL = "http://" + domain
    
    HTML = ""
    HTML += f"<h2 align='center'>_________________________________</h2><br>"
    HTML += f"<h1 align='center'>VULNERABILITY REPORT</h1>"
    HTML += f"<h2 align='center'>_________________________________</h2><br>"
    HTML += f"<p align='center'><i>This is a highly concise vulnerability report generated by Python-based modules, offering a comprehensive analysis of the target's security.</i></p>"

    HTML += f"<h1 align='center'>Summary</h1>"
    HTML += f"""
    <h3 align='left'>
        <i>I. Overview............................................................................................................ 1</i>
        <i>II. DNS Request.......................................................................................................1</i>
        <i>III. Data about HTTP/HTTPS certificate................................................................1</i>
        <i>IV. NMAP scan.........................................................................................................2</i>
        <i>V. Nikto scan............................................................................................................3</i>
        <i>VI. Potential vulnerabilities.....................................................................................3</i>
        <i>VII. Recommendations............................................................................................4</i>
    </h3>
    """
    HTML += f"<h1>I. Overview</h1><br>"
    HTML += f"<p>This report presents the results of a vulnerability assessment conducted on <strong>{domain}</strong> using Python modules. The objective of this assessment is to provide a brief overview of the security posture of the target and identify potential vulnerabilities that could be exploited by attackers.<br><br>The main objective of the assessment was to identify vulnerabilities that could be used by attackers to compromise the confidentiality, integrity, or availability of the target.<br><br>Python modules are used to automate the scanning process and identify potential vulnerabilities in the target.</p><br><br><br>"
    HTML += f"<strong>Date:</strong>    {datetime.now().strftime('%Y-%m-%d %H:%M')}<br>"
    HTML += f"<strong>Target :</strong> {domain}<br>"
    HTML += f"<strong>Type:</strong>    vulnerability scanner<br>"
   
    print(f"\n>>> {Fore.GREEN}[+] Generating PDF...{Style.RESET_ALL}")
    print(f">>> {Fore.GREEN}[+] Started at {datetime.now()}{Style.RESET_ALL}")

    # DNS
    print(f">>> {Fore.YELLOW}[-] DNS Lookup...{Style.RESET_ALL}")
    HTML += f"<h1>II. DNS Request</h1><br>"
    HTML += f"<p>{DNSLookUp(domain, True)}</p>"
    print(f">>> {Fore.GREEN}[+] DNS done!{Style.RESET_ALL}")

    # Certificate
    print(f">>> {Fore.YELLOW}[-] Certificate lookup...{Style.RESET_ALL}")
    HTML += f"<h1>III. Data about HTTP/HTTPS certificate</h1><br>"
    HTML += f"<p>{getCertificate(domain, True)}</p>"
    print(f">>> {Fore.GREEN}[+] Certificate done!{Style.RESET_ALL}")
    
    # Nmap scan
    print(f">>> {Fore.YELLOW}[-] Nmap scan...{Style.RESET_ALL}")
    resScan, versions = Nmap(domain, True)
    HTML += f"<h1>IV. NMAP scan</h1><br>"
    HTML += f"<p>{resScan}</p>"
    print(f">>> {Fore.GREEN}[+] Nmap scan done!{Style.RESET_ALL}")

    # Web scan
    print(f">>> {Fore.YELLOW}[-] Nikto scan...{Style.RESET_ALL}")
    HTML += f"<h1>VI. Nikto scan</h1><br>"
    res = check_server(URL, True)
    HTML += res
    print(f">>> {Fore.GREEN}[+] Nikto scan done!{Style.RESET_ALL}")

    # Exploits
    print(f">>> {Fore.YELLOW}[-] Search for exploits and vulnerabilities...{Style.RESET_ALL}")
    HTML += f"<h1>VII. Potential vulnerabilities</h1><br>"
    for vuln in versions:
        HTML += f"""<strong><h2><i>Service - {vuln}</i></h2></strong>
        <table border="1">
            <thead>
                <tr>
                    <th width="195">Links to vulnerabilities</th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td><p>{searchsploit(vuln, True)}</p></td>
                </tr>
            </tbody>
        </table>
        """
    print(f">>> {Fore.GREEN}[+] Searchsploit done!{Style.RESET_ALL}")
    
    HTML += f"<h1>VIII. Recommendations</h1><br>"
    HTML += """Keep your systems up-to-date with the latest security patches and updates for all software and services running on your domain or IP address. Vulnerabilities are often discovered and patched by vendors, so it's important to stay current with updates to minimize risk.<br><br>
    We also recommend reviewing the list of links provided in this report, which point to known exploits and vulnerabilities affecting various services. These links can provide additional information and guidance on how to mitigate these specific security risks for your domain or IP address.<br><br>
    By following these recommendations and staying vigilant against emerging security threats, you can help protect your systems and data from unauthorized access and exploitation.
    """

    renderHTML(HTML)  # Generate PDF
    PATH = os.path.join(os.getcwd(), 'result.pdf')
    print(f">>> {Fore.CYAN}PDF created successfully at {PATH}{Style.RESET_ALL}")
    print(f">>> {Fore.GREEN}[+] Ended at {datetime.now()}{Style.RESET_ALL}")

def generate_reverse_shell():
    """Generate reverse shells."""
    IP = input(">>> Type your LHOST\n>>> ")
    PORT = input(">>> Type your LPORT\n>>> ")
    shells = reverse_shells(IP, PORT)

    print("\n\n=========================")
    print("Reverse shells one liner")
    print("=========================\n")
    for cmd, value in shells.items():
        print(f"{Fore.GREEN}[+] {cmd}{Style.RESET_ALL} => {Fore.MAGENTA}{value}{Style.RESET_ALL}")

if __name__ == "__main__":
    colorama_init()
    displayHeader()
    displayMenu()
    
    option = input_with_retry(">>> Choose an option\n>>> ", int)

    while option != 99:
        if option == 1:
            recon_menu()
        elif option == 2:
            scanning_menu()
        elif option == 3:
            exploit_menu()
        elif option == 4:
            osint_menu()
        elif option == 5:
            generate_report()
            break
        elif option == 6:
            generate_reverse_shell()

        displayMenu()
        option = input_with_retry(">>> Choose an option\n>>> ", int)

    print("Exiting... Goodbye!")
